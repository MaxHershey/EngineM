var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Main = (function (_super) {
    __extends(Main, _super);
    function Main() {
        _super.call(this, 'screen');
        this.DEBUG_MODE = true;
        // kick it
        this.init();
    }
    Main.prototype.init = function () {
        var _this = this;
        this.entities = this.createInvaders().concat(new Player(this));
        this.loadSounds(['audio/pew.wav']).then(function () {
            _super.prototype.init.call(_this);
        });
    };
    Main.prototype.update = function () {
        var _this = this;
        var entities = this.entities;
        var notCollidingWithAnything = function (b1) {
            return entities.filter(function (b2) {
                return _this.UTILITY.hasColided(b1, b2);
            }).length === 0;
        };
        this.entities = this.entities.filter(notCollidingWithAnything);
        _super.prototype.update.call(this);
    };
    Main.prototype.createInvaders = function () {
        var invaders = [];
        for (var i = 0; i < 24; i++) {
            var x = 30 + (i % 8) * 30; // 8 in a row
            var y = 30 + (i % 3) * 30; // 3 rows
            invaders.push(new Invader(this, { x: x, y: y }));
        }
        return invaders;
    };
    return Main;
})(EngineM.Game);
window.onload = function () {
    new Main();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOlsiTWFpbiIsIk1haW4uY29uc3RydWN0b3IiLCJNYWluLmluaXQiLCJNYWluLnVwZGF0ZSIsIk1haW4uY3JlYXRlSW52YWRlcnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7SUFBbUJBLHdCQUFZQTtJQUMzQkE7UUFDSUMsa0JBQU1BLFFBQVFBLENBQUNBLENBQUNBO1FBQ2hCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUV2QkEsVUFBVUE7UUFDVkEsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7SUFDaEJBLENBQUNBO0lBRU1ELG1CQUFJQSxHQUFYQTtRQUFBRSxpQkFNQ0E7UUFMR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFL0RBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1lBQ3BDQSxnQkFBS0EsQ0FBQ0EsSUFBSUEsWUFBRUEsQ0FBQ0E7UUFDakJBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRU1GLHFCQUFNQSxHQUFiQTtRQUFBRyxpQkFVQ0E7UUFUR0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDN0JBLElBQUlBLHdCQUF3QkEsR0FBR0EsVUFBQ0EsRUFBbUJBO1lBQy9DQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFDQSxFQUFtQkE7Z0JBQ3ZDQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUMzQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLENBQUNBLENBQUNBO1FBRUZBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7UUFDL0RBLGdCQUFLQSxDQUFDQSxNQUFNQSxXQUFFQSxDQUFDQTtJQUNuQkEsQ0FBQ0E7SUFFT0gsNkJBQWNBLEdBQXRCQTtRQUNJSSxJQUFJQSxRQUFRQSxHQUFzQkEsRUFBRUEsQ0FBQ0E7UUFFckNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxhQUFhQTtZQUN4Q0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0E7WUFFcENBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JEQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUFDTEosV0FBQ0E7QUFBREEsQ0F6Q0EsQUF5Q0NBLEVBekNrQixPQUFPLENBQUMsSUFBSSxFQXlDOUI7QUFHRCxNQUFNLENBQUMsTUFBTSxHQUFHO0lBQ1osSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNmLENBQUMsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTWFpbiBleHRlbmRzIEVuZ2luZU0uR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc2NyZWVuJyk7XHJcbiAgICAgICAgdGhpcy5ERUJVR19NT0RFID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBraWNrIGl0XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSB0aGlzLmNyZWF0ZUludmFkZXJzKCkuY29uY2F0KG5ldyBQbGF5ZXIodGhpcykpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubG9hZFNvdW5kcyhbJ2F1ZGlvL3Bldy53YXYnXSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICB2YXIgZW50aXRpZXMgPSB0aGlzLmVudGl0aWVzO1xyXG4gICAgICAgIHZhciBub3RDb2xsaWRpbmdXaXRoQW55dGhpbmcgPSAoYjE6IEVuZ2luZU0uSUVudGl0eSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZW50aXRpZXMuZmlsdGVyKChiMjogRW5naW5lTS5JRW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5VVElMSVRZLmhhc0NvbGlkZWQoYjEsIGIyKTtcclxuICAgICAgICAgICAgfSkubGVuZ3RoID09PSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5lbnRpdGllcyA9IHRoaXMuZW50aXRpZXMuZmlsdGVyKG5vdENvbGxpZGluZ1dpdGhBbnl0aGluZyk7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgY3JlYXRlSW52YWRlcnMoKTogRW5naW5lTS5JRW50aXR5W10ge1xyXG4gICAgICAgIHZhciBpbnZhZGVyczogRW5naW5lTS5JRW50aXR5W10gPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHggPSAzMCArIChpICUgOCkgKiAzMDsgLy8gOCBpbiBhIHJvd1xyXG4gICAgICAgICAgICB2YXIgeSA9IDMwICsgKGkgJSAzKSAqIDMwOyAvLyAzIHJvd3NcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGludmFkZXJzLnB1c2gobmV3IEludmFkZXIodGhpcywgeyB4OiB4LCB5OiB5IH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGludmFkZXJzO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgbmV3IE1haW4oKTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
