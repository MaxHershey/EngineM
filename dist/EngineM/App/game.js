var EngineM;
(function (EngineM) {
    var Game = (function () {
        function Game(canvasId, context) {
            this.DEBUG_MODE = false;
            this.UTILITY = new EngineM.Utility();
            this.entities = [];
            this.sounds = {};
            this.canvas = document.getElementById(canvasId);
            this.screen = this.canvas.getContext(context || '2d');
            this.size = {
                x: this.canvas.width,
                y: this.canvas.height
            };
        }
        Game.prototype.init = function () {
            this.tick();
        };
        // tick is essentially the game loop that will run ~60x / second.
        Game.prototype.tick = function () {
            var _this = this;
            this.update();
            this.draw();
            // kick off game loop
            requestAnimationFrame(function () {
                _this.tick();
            });
        };
        Game.prototype.update = function () {
            for (var _i = 0, _a = this.entities; _i < _a.length; _i++) {
                var entity = _a[_i];
                entity.update();
            }
        };
        Game.prototype.draw = function () {
            // start with a fresh canvas.
            this.screen.clearRect(0, 0, this.size.x, this.size.y);
            for (var _i = 0, _a = this.entities; _i < _a.length; _i++) {
                var entity = _a[_i];
                entity.draw();
                if (this.DEBUG_MODE) {
                    this.UTILITY.drawRect(this.screen, entity);
                }
            }
        };
        Game.prototype.loadSounds = function (urls) {
            var _this = this;
            var promises = [];
            // wait until all sounds are loaded before resolving promise.
            for (var _i = 0; _i < urls.length; _i++) {
                var url = urls[_i];
                var promise = new Promise(function (resolve, reject) {
                    var sound = new Audio(url);
                    sound.addEventListener('canplaythrough', loaded);
                    var loaded = function () {
                        sound.removeEventListener('canplaythrough', loaded);
                        _this.sounds[url] = function () {
                            sound.load();
                            sound.play();
                        };
                        resolve();
                    };
                    sound.load();
                });
                promises.push(promise);
            }
            return Promise.all(promises);
        };
        return Game;
    })();
    EngineM.Game = Game;
})(EngineM || (EngineM = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhbWUudHMiXSwibmFtZXMiOlsiRW5naW5lTSIsIkVuZ2luZU0uR2FtZSIsIkVuZ2luZU0uR2FtZS5jb25zdHJ1Y3RvciIsIkVuZ2luZU0uR2FtZS5pbml0IiwiRW5naW5lTS5HYW1lLnRpY2siLCJFbmdpbmVNLkdhbWUudXBkYXRlIiwiRW5naW5lTS5HYW1lLmRyYXciLCJFbmdpbmVNLkdhbWUubG9hZFNvdW5kcyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxPQUFPLENBbUZiO0FBbkZELFdBQU8sT0FBTyxFQUFDLENBQUM7SUFFWkE7UUFDSUMsY0FBYUEsUUFBZ0JBLEVBQUVBLE9BQWdCQTtZQVN4Q0MsZUFBVUEsR0FBWUEsS0FBS0EsQ0FBQ0E7WUFDNUJBLFlBQU9BLEdBQWFBLElBQUlBLGVBQU9BLEVBQUVBLENBQUNBO1lBS2xDQSxhQUFRQSxHQUFjQSxFQUFFQSxDQUFDQTtZQUN6QkEsV0FBTUEsR0FBT0EsRUFBRUEsQ0FBQ0E7WUFmbkJBLElBQUlBLENBQUNBLE1BQU1BLEdBQXNCQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNuRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBNkJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLElBQUlBLElBQUlBLENBQUNBLENBQUNBO1lBQ2hGQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQTtnQkFDUkEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0E7Z0JBQ3BCQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQTthQUN4QkEsQ0FBQ0E7UUFDTkEsQ0FBQ0E7UUFXTUQsbUJBQUlBLEdBQVhBO1lBQ0lFLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVERixpRUFBaUVBO1FBQzFEQSxtQkFBSUEsR0FBWEE7WUFBQUcsaUJBUUNBO1lBUEdBLElBQUlBLENBQUNBLE1B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QUFDTEEsQ0FBQ0EsRUFuRk0sT0FBTyxLQUFQLE9BQU8sUUFtRmIiLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBFbmdpbmVNIHtcclxuICAgIFxyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWUge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yIChjYW52YXNJZDogc3RyaW5nLCBjb250ZXh0Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhc0lkKTtcclxuICAgICAgICAgICAgdGhpcy5zY3JlZW4gPSA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPnRoaXMuY2FudmFzLmdldENvbnRleHQoY29udGV4dCB8fCAnMmQnKTtcclxuICAgICAgICAgICAgdGhpcy5zaXplID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdGhpcy5jYW52YXMud2lkdGgsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmNhbnZhcy5oZWlnaHRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIERFQlVHX01PREU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgVVRJTElUWTogSVV0aWxpdHkgPSBuZXcgVXRpbGl0eSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIHB1YmxpYyBzY3JlZW46IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgICAgICBwdWJsaWMgc2l6ZTogSVBvaW50O1xyXG4gICAgICAgIHB1YmxpYyBlbnRpdGllczogSUVudGl0eVtdID0gW107XHJcbiAgICAgICAgcHVibGljIHNvdW5kczoge30gPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHRpY2sgaXMgZXNzZW50aWFsbHkgdGhlIGdhbWUgbG9vcCB0aGF0IHdpbGwgcnVuIH42MHggLyBzZWNvbmQuXHJcbiAgICAgICAgcHVibGljIHRpY2soKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8ga2ljayBvZmYgZ2FtZSBsb29wXHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGRyYXcoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8vIHN0YXJ0IHdpdGggYSBmcmVzaCBjYW52YXMuXHJcbiAgICAgICAgICAgIHRoaXMuc2NyZWVuLmNsZWFyUmVjdCgwLCAwLCB0aGlzLnNpemUueCwgdGhpcy5zaXplLnkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgZW50aXR5IG9mIHRoaXMuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLkRFQlVHX01PREUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlVUSUxJVFkuZHJhd1JlY3QodGhpcy5zY3JlZW4sIGVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGxvYWRTb3VuZHModXJsczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyB3YWl0IHVudGlsIGFsbCBzb3VuZHMgYXJlIGxvYWRlZCBiZWZvcmUgcmVzb2x2aW5nIHByb21pc2UuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHVybCBvZiB1cmxzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VuZCA9IG5ldyBBdWRpbyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgbG9hZGVkKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2FkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgbG9hZGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VuZHNbdXJsXSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kLmxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kLnBsYXkoKTsgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9OyBcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzb3VuZC5sb2FkKCk7ICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
